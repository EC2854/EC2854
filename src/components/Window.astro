---
const { name, id } = Astro.props;
---
<div id={id} class="window">
    <div>
        <header>
            <div>
            <h1>{name}</h1>
            <nav>
                <button id={`${id}-maximize`} class="button-maximize">fullscreen</button>
                <button id={`${id}-close`} class="button-close">close</button>
            </nav>
            </div>
        </header>
        <section>
            <slot />
        </section>
    </div>
</div>

<style lang="scss">
    @use "../styles/_animations.scss";
    @use "../styles/_colors.scss";
    @use "../styles/_fonts.scss";
    @use "sass:color";

    .window {
        position: fixed;
        top: 100px;
        left: 100px;
        width: 800px;
        height: 480px;
        border: 2px solid var(--window-outline);
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
        box-sizing: border-box;
        visibility: hidden;
        opacity: 0;
        transform: translateY(20px);
        pointer-events: none;
        display: flex;
        &.visible {
            pointer-events: all;
            visibility: visible;
            opacity: 1;
            transform: translateY(0);
            transition-delay: 0s;
        }
        & > div {
            display: flex;
            flex-grow: 1;
            height: 100%;
            box-sizing: border-box;

            flex-direction: column;
            border: 5px solid var(--window-border);
        }
    }
    header {
        border-bottom: 5px solid var(--window-border);
        cursor: move;
        & > div {
            display: flex;
            align-items: center;
            justify-content: flex-start;
            background: linear-gradient(to right, var(--window-header) 70%, var(--window-header-light));
            border: 2px solid var(--window-outline);
            color: var(--fg);
            padding: .2rem .5rem;
            font-weight: 600;
            user-select: none;
            & > * {
                display: flex;
                align-items: center;
            }
            & > h1 {
                font-size: 1.5rem;
                margin: 0;
                pointer-events: none;
                user-select: none;
            }
            & > nav {
                margin-left: auto;
                & > button {
                    font-family: 'Material Icons', sans-serif;
                    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
                    font-weight: 900;

                    margin-left: .4rem;
                    height: 1.8rem;
                    width: 1.8rem;
                    transition: .1s;
                    cursor: pointer;
                    &:hover {
                        animation: bounce 0.5s ease forwards;
                    }
                }
                & > .button- {
                    &maximize {
                        background-color: var(--maximize);
                        border: 2px solid var(--maximize-fg);
                        color: var(--maximize-fg);
                        &:hover {
                            background-color: var(--maximize-pressed);
                            border: 2px solid var(--maximize-fg-pressed);
                            color: var(--maximize-fg-pressed);
                        }
                    }
                    &close {
                        background-color: var(--close);
                        border: 2px solid var(--close-fg);
                        color: var(--close-fg);
                        &:hover {
                            background-color: var(--close-pressed);
                            border: 2px solid var(--close-fg-pressed);
                            color: var(--close-fg-pressed);
                        }
                    }
                }
            }
        }
    }
    section {
        flex: 1;
        border: 2px solid var(--window-outline);
        padding: 0;
        background: var(--bg);
        color: var(--fg);
        height: 100%;
        width: 100%;
        display: flex;
        box-sizing: border-box;
        min-height: 0;
    }
</style>

<script is:inline define:vars={{ id }}>
    const el = document.getElementById(id);
    const header = el.querySelector('.window > div > header');
    const closeBtn = document.getElementById(`${id}-close`);
    const maximizeBtn = document.getElementById(`${id}-maximize`);

    function setZIndex(className, zIndex) {
        document.querySelectorAll(`div.${className}`).forEach(div => {
            div.style.zIndex = zIndex.toString();
        });
    }

    let isDragging = false;
    let offsetX = 0, offsetY = 0;

    function onMouseDown(e) {
        isDragging = true;
        const rect = el.getBoundingClientRect();
        offsetX = e.clientX - rect.left;
        offsetY = e.clientY - rect.top;

        setZIndex("window", 1);
        el.style.zIndex = 2;

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
    }

    // Resizing
    let isResizing = false;
    let resizeStartX = 0, resizeStartY = 0;
    let resizeStartWidth = 0, resizeStartHeight = 0;

    const resizer = document.createElement("div");
    Object.assign(resizer.style, {
        width: "20px",
        height: "20px",
        position: "absolute",
        right: "0",
        bottom: "0",
        cursor: "se-resize",
        background: "transparent"
    });
    el.appendChild(resizer);

    resizer.addEventListener("mousedown", (e) => {
        e.stopPropagation();
        isResizing = true;
        resizeStartX = e.clientX;
        resizeStartY = e.clientY;
        resizeStartWidth = el.offsetWidth;
        resizeStartHeight = el.offsetHeight;

        document.addEventListener("mousemove", onMouseMove);
        document.addEventListener("mouseup", onMouseUp);
    });

    // Shared mouse move handler
    function onMouseMove(e) {
        if (isDragging) {
            el.style.left = `${e.clientX - offsetX}px`;
            el.style.top = `${e.clientY - offsetY}px`;
        } else if (isResizing) {
            const dx = e.clientX - resizeStartX;
            const dy = e.clientY - resizeStartY;

            const newWidth = resizeStartWidth + dx;
            const newHeight = resizeStartHeight + dy;

            const originalWidth = el.style.width;
            const originalHeight = el.style.height;

            el.style.width = `${newWidth}px`;
            if (el.scrollWidth > el.clientWidth) el.style.width = originalWidth;

            el.style.height = `${newHeight}px`;
            if (el.scrollHeight > el.clientHeight) el.style.height = originalHeight;

        }
        const data = el.dataset;
        data.prevLeft = el.style.left || el.offsetLeft + "px";
        data.prevTop = el.style.top || el.offsetTop + "px";
        data.prevWidth = el.style.width || el.offsetWidth + "px";
        data.prevHeight = el.style.height || el.offsetHeight + "px";
        data.maximized = "false";
    }

    function onMouseUp() {
        isDragging = false;
        isResizing = false;
        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
    }

    // Close window
    function closeWindow() {
        el.classList.toggle("visible");
    }

    // Maximize / Restore window
    function maximizeWindow() {
        const data = el.dataset;

        if (data.maximized === "true") {
            el.style.left = data.prevLeft || "100px";
            el.style.top = data.prevTop || "100px";
            el.style.width = data.prevWidth || "800px";
            el.style.height = data.prevHeight || "480px";
            data.maximized = "false";
        } else {
            data.prevLeft = el.style.left || el.offsetLeft + "px";
            data.prevTop = el.style.top || el.offsetTop + "px";
            data.prevWidth = el.style.width || el.offsetWidth + "px";
            data.prevHeight = el.style.height || el.offsetHeight + "px";

            el.style.left = "0";
            el.style.top = "0";
            el.style.width = "100vw";
            el.style.height = "calc(100vh - 48px)";
            data.maximized = "true";
        }
    }

    header.addEventListener("mousedown", onMouseDown);
    header.addEventListener("dblclick", maximizeWindow);
    closeBtn.addEventListener("click", closeWindow);
    maximizeBtn.addEventListener("click", maximizeWindow);
</script>
