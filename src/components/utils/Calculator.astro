---
export const metadata = {
  id: 'calculator',
  name: 'Calculator',
  icon: 'calculate',
};
---

<div class="calculator flex flex-col items-center justify-center p-4 w-full h-full box-border">
    <div class="calc-input-container transition-all duration-200 w-4/5 py-4">
        <input
            id="calc-input"
            type="text"
            placeholder=":3"
            class="h-[3em] w-full border-2 border-[var(--border)] bg-[var(--bg-high)] text-[var(--fg)] text-lg px-4 py-1 outline-none box-border"/>
        <div class="flex items-center w-full h-10 border-x-2 border-b-2 border-[var(--border)] bg-[var(--bg-high)] px-4 mt-0">
            <p id="calc-result" class="w-full text-[var(--fg)] font-bold"></p>
            <button
                id="calc-expand"
                class="icon w-6 h-6 border-2 border-[var(--border)] bg-[var(--button-bg)] text-[var(--fg)] cursor-pointer transition-all hover:bg-[var(--bg-pressed)] hover:text-[var(--fg-pressed)] hover:animate-[down_.5s_ease_forwards]">
                keyboard_double_arrow_down
            </button>
        </div>
    </div>
    <div id="calc-buttons" class="hidden w-full pb-4 grid-cols-4 grid-rows-5 gap-2 h-[calc(100%-6em)] [&.visible]:grid">
    </div>
</div>

<style is:global>
    #calc-buttons > button {
        font-weight: bold;
        border: 2px solid var(--border);
        background: var(--bg-highest);
        color: var(--fg);
        cursor: pointer;
        width: 100%;
        height: 100%;
        font-size: 2em;
        user-select: none;
        transition: 0.3s;
        &:hover {
            background-color: var(--bg-pressed);
            color: var(--fg-pressed);
            border-color: var(--border-pressed);
        }
    }


    .calc-input-container.full {
        width: 100%;
        & > input {
            height: 4em;
        }
        & > div {
            height: 3em;
        }
    }

    #calc-result.error {
        color: var(--close-fg);
    }

    #calc-expand.up:hover {
        animation: up 0.5s ease forwards;
    }
</style>

<script>
    import { evaluate } from "mathjs";

    let input = document.getElementById('calc-input') as HTMLInputElement;
    let result = document.getElementById('calc-result') as HTMLParagraphElement;
    let container = document.querySelector('.calculator') as HTMLDivElement;
    let expand = document.getElementById('calc-expand') as HTMLButtonElement;
    let button_box = document.getElementById('calc-buttons') as HTMLDivElement;

    const buttons = [
        { label: 'C', value: 'clear' },
        { label: '(', value: '(' },
        { label: ')', value: ')' },
        { label: 'backspace', value: 'delete', icon: true },
        { label: '7', value: '7' },
        { label: '8', value: '8' },
        { label: '9', value: '9' },
        { label: '*', value: '*' },
        { label: '4', value: '4' },
        { label: '5', value: '5' },
        { label: '6', value: '6' },
        { label: '/', value: '/' },
        { label: '1', value: '1' },
        { label: '2', value: '2' },
        { label: '3', value: '3' },
        { label: '-', value: '-' },
        { label: '0', value: '0' },
        { label: '.', value: '.' },
        { label: 'superscript', value: '^2', icon: true },
        { label: '+', value: '+' },
    ];

    buttons.forEach(({ label, value, icon }) => {
        const button = document.createElement('button');
        button.textContent = label;

        if (icon) {
        button.style.fontFamily = 'Material Icons';
        button.style.fontWeight = 'normal';
        }

        button.addEventListener('click', () => {
            if (!input) return;
            if (value === 'clear') {
                input.value = '';
            } else if (value === 'delete') {
                input.value = input.value.slice(0, -1);
            } else {
                input.value += value;
            }
            calculate(input.value);
        });

        button_box?.appendChild(button);
    });

    function toggleButtons(selector: string) {
        const el = document.querySelector(selector);
        el?.classList.toggle("visible");

        const isVisible = el?.classList.contains("visible");
        const input_div = document.querySelector(".calc-input-container");
        if (!expand) return;
        if (!input_div) return;

        if (isVisible) {
            expand.innerHTML = "keyboard_double_arrow_up";
            expand.classList.add("up");
            input_div.classList.add("full");

            const window = document.getElementById("calculator") as HTMLDivElement;
            if (window && Number(window.style.height.replace("px", "")) < 510) {
                window.style.height = "510px";
            }
        } else {
            expand.innerHTML = "keyboard_double_arrow_down";
            expand.classList.remove("up");
            input_div.classList.remove("full");
        }
    }

    function calculate(val: string) {
        val = val.trim();
        if (val === "") {
            result.innerHTML = "";
            return;
        }
        try {
            const res = evaluate(val).toString();
            result.innerHTML = res;
            result.classList.remove("error");
        } catch (err) {
            result.innerHTML = "・_・";
            result.classList.add("error");
        }
    }

    input.addEventListener("input", () => calculate(input.value));
    expand.addEventListener("click", () => toggleButtons("#calc-buttons"));
    container.addEventListener('click', () => {
        input.focus();
    });
</script>
