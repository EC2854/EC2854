---
function loadModules(glob) {
    return Object.entries(glob).map(([path, mod]) => {
        const metadata = mod.metadata ?? {};
        return {
            id: metadata.id ?? 'unknown',
            name: metadata.name ?? 'Unnamed',
            icon: metadata.icon ?? 'apps',
        };
    });
}
const utils = loadModules(import.meta.glob('../components/utils/*.astro', { eager: true }));
const info = loadModules(import.meta.glob('../components/info/*.astro', { eager: true }));
---

<div class="bar">
    <nav>
        <ul>
            {info.map(({ id, name, icon }) => (
                <li>
                    <button toggle-id={id}>
                        <span>{icon}</span>
                        {name}
                    </button>
                </li>
            ))}
            <hr>
            {utils.map(({ id, name, icon }) => (
                <li>
                    <button toggle-id={id}>
                        <span>{icon}</span>
                        {name}
                    </button>
                </li>
            ))}
        </ul>
    </nav>
    <header>
        <button id="logo">
            <span>rocket_launch</span>
            <p> Start</p>
        </button>
        <button id="clock"></button>
    </header>
</div>

<style lang="scss">
    @use "../styles/_animations.scss";
    @use "../styles/_fonts.scss";

    .bar {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      z-index: 9999;
      pointer-events: none;
    }

    header {
      pointer-events: all;
      background: var(--bar-bg);
      color: var(--fg);
      border-top: 3px solid var(--bar-border);
      padding: 8px;
      display: flex;
      align-items: center;
      justify-content: flex-start;
      height: 48px;
      box-sizing: border-box;
      z-index: 10;
      font-weight: 600;
      box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;

      & > * {
        display: flex;
        align-items: center;
      }

      & > #logo,
      & > #clock {
        height: 32px;
        padding: 0 .8rem;
        font-size: 1.05rem;
        box-sizing: border-box;
        cursor: pointer;
        background-color: var(--bar-button);
        color: var(--bar-button-fg);
        border: 2px solid var(--bar-button-fg);
        box-shadow: rgba(0, 0, 0, 0.1) 1.95px 1.95px 2.6px;

        &:hover {
          animation: bounce 0.5s ease forwards;
          background-color: var(--bar-button-pressed);
          color: var(--bar-button-fg-pressed);
          border-color: var(--bar-button-fg-pressed);
        }

        & > span {
          font-family: 'Material Icons', sans-serif;
          font-size: 1.1rem;
        }
      }

      & > #clock {
        margin-left: auto;
      }
    }

    nav {
      width: 360px;
      height: 50vh;
      background: var(--bar-bg);
      color: var(--fg);
      visibility: hidden;
      opacity: 0;
      transform: translateY(20px);
      transition: 0.2s;
      padding: 0.2em 1em;
      border: 3px solid var(--bar-border);
      border-bottom: none;
      box-shadow: 0px -3px 5px rgba(0, 0, 0, 0.1);

      &.visible {
        pointer-events: all;
        visibility: visible;
        opacity: 1;
        transform: translateY(0);
        transition-delay: 0s;
      }

      & > ul {
        padding: 0;
        list-style-type: none;

        & > hr {
          border: 1px solid var(--bar-border);
        }

        & > li > button {
          width: 100%;
          color: var(--fg);
          background: none;
          border: none;
          margin: 0.2em 0;
          transition: 0.16s;
          font-size: 1.3em;
          text-align: left;
          padding: 0.2em 0.8em;
          cursor: pointer;

          & > span {
            font-family: 'Material Icons', sans-serif;
            color: var(--bar-fg);
          }

          &:hover {
            border-left: 0.8em solid var(--bar-pressed);
            background: linear-gradient(to right, var(--bar-pressed-light), var(--bar-bg));
          }
        }
      }
    }
</style>

<script>
    const clock = document.getElementById("clock") as HTMLButtonElement | null;
    const logo = document.getElementById("logo") as HTMLButtonElement | null;
    const nav = document.querySelector(".bar nav") as HTMLElement | null;

    function toggleVisibility(selector: string): void {
        const el = document.querySelector(selector);
        el?.classList.toggle("visible");
    }


    logo?.addEventListener("click", () => toggleVisibility(".bar nav")); // TODO replace this with nav somehow
    if (nav) {
        const buttons = nav.querySelectorAll<HTMLButtonElement>('button');
        buttons.forEach(button => {
            const id = button.getAttribute('toggle-id') as String;
            if (id) {
                button.addEventListener("click", () => {
                    toggleVisibility(`#${id}`);
                    toggleVisibility(".bar nav"); // TODO and this one xD
                })
            }
        })
    }
    clock?.addEventListener("click", () => toggleVisibility("#timer"));

    function updateClock(): void {
        if (clock) {
            const now = new Date();
            const hours = now.getHours().toString().padStart(2, "0");
            const minutes = now.getMinutes().toString().padStart(2, "0");
            clock.textContent = `${hours}:${minutes}`;
        }
    }
    updateClock();
    setInterval(updateClock, 15000);
</script>
